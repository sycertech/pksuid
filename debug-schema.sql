/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- pksuid-extension/src/lib.rs:46
-- bootstrap
CREATE TYPE pksuid; -- shell type

-- pksuid-extension/src/lib.rs:64
-- pksuid::text_to_pksuid
CREATE  FUNCTION "text_to_pksuid"(
	"input" TEXT /* &str */
) RETURNS pksuid /* core::result::Result<pksuid::Pksuid, alloc::boxed::Box<dyn core::error::Error + core::marker::Send + core::marker::Sync>> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'text_to_pksuid_wrapper';

-- pksuid-extension/src/lib.rs:25
-- pksuid::pksuid_send
-- requires:
--   shell_type
CREATE  FUNCTION "pksuid_send"(
	"input" pksuid /* pksuid::Pksuid */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_send_wrapper';

-- pksuid-extension/src/lib.rs:30
-- pksuid::pksuid_receive
-- requires:
--   shell_type
CREATE  FUNCTION "pksuid_receive"(
	"internal" internal /* pgrx::datum::internal::Internal */
) RETURNS pksuid /* core::result::Result<pksuid::Pksuid, alloc::boxed::Box<dyn core::error::Error + core::marker::Send + core::marker::Sync>> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_receive_wrapper';

-- pksuid-extension/src/lib.rs:13
-- pksuid::pksuid_out
-- requires:
--   shell_type
CREATE  FUNCTION "pksuid_out"(
	"value" pksuid /* pksuid::Pksuid */
) RETURNS cstring /* &core::ffi::c_str::CStr */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_out_wrapper';

-- pksuid-extension/src/lib.rs:20
-- pksuid::pksuid_in
-- requires:
--   shell_type
CREATE  FUNCTION "pksuid_in"(
	"input" cstring /* &core::ffi::c_str::CStr */
) RETURNS pksuid /* core::result::Result<pksuid::Pksuid, alloc::boxed::Box<dyn core::error::Error + core::marker::Send + core::marker::Sync>> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_in_wrapper';

-- pksuid-extension/src/lib.rs:48
-- creates:
--   Type(pksuid::Pksuid)

-- requires:
--   shell_type
--   pksuid_in
--   pksuid_out
--   pksuid_send
--   pksuid_receive


create type pksuid (
	input = pksuid_in,
	output = pksuid_out,
	receive = pksuid_receive,
	send = pksuid_send,
	like = text
);

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_le
CREATE  FUNCTION "pksuid_le"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_le_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_le
CREATE OPERATOR <= (
	PROCEDURE="pksuid_le",
	LEFTARG=pksuid, /* pksuid::Pksuid */
	RIGHTARG=pksuid, /* pksuid::Pksuid */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);

-- pksuid-extension/src/lib.rs:42
-- pksuid::pksuid_generate
-- requires:
--   shell_type
CREATE  FUNCTION "pksuid_generate"(
	"prefix" TEXT /* &str */
) RETURNS pksuid /* pksuid::Pksuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_generate_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_cmp
CREATE  FUNCTION "pksuid_cmp"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_cmp_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_eq
CREATE  FUNCTION "pksuid_eq"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_eq_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_eq
CREATE OPERATOR = (
	PROCEDURE="pksuid_eq",
	LEFTARG=pksuid, /* pksuid::Pksuid */
	RIGHTARG=pksuid, /* pksuid::Pksuid */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_ge
CREATE  FUNCTION "pksuid_ge"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_ge_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_ge
CREATE OPERATOR >= (
	PROCEDURE="pksuid_ge",
	LEFTARG=pksuid, /* pksuid::Pksuid */
	RIGHTARG=pksuid, /* pksuid::Pksuid */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_gt
CREATE  FUNCTION "pksuid_gt"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_gt_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_gt
CREATE OPERATOR > (
	PROCEDURE="pksuid_gt",
	LEFTARG=pksuid, /* pksuid::Pksuid */
	RIGHTARG=pksuid, /* pksuid::Pksuid */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_hash
CREATE  FUNCTION "pksuid_hash"(
	"value" pksuid /* pksuid::Pksuid */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_hash_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::Pksuid
CREATE OPERATOR FAMILY Pksuid_hash_ops USING hash;
CREATE OPERATOR CLASS Pksuid_hash_ops DEFAULT FOR TYPE Pksuid USING hash FAMILY Pksuid_hash_ops AS
	OPERATOR    1   =  (Pksuid, Pksuid),
	FUNCTION    1   pksuid_hash(Pksuid);

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_lt
CREATE  FUNCTION "pksuid_lt"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_lt_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_lt
CREATE OPERATOR < (
	PROCEDURE="pksuid_lt",
	LEFTARG=pksuid, /* pksuid::Pksuid */
	RIGHTARG=pksuid, /* pksuid::Pksuid */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- pksuid/src/lib.rs:29
-- pksuid::Pksuid
CREATE OPERATOR FAMILY Pksuid_btree_ops USING btree;
CREATE OPERATOR CLASS Pksuid_btree_ops DEFAULT FOR TYPE Pksuid USING btree FAMILY Pksuid_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 pksuid_cmp(Pksuid, Pksuid);

-- pksuid-extension/src/lib.rs:69
-- pksuid::pksuid_to_text
CREATE  FUNCTION "pksuid_to_text"(
	"input" pksuid /* pksuid::Pksuid */
) RETURNS TEXT /* alloc::string::String */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_to_text_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_ne
CREATE  FUNCTION "pksuid_ne"(
	"left" pksuid, /* pksuid::Pksuid */
	"right" pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_ne_wrapper';

-- pksuid/src/lib.rs:29
-- pksuid::pksuid_ne
CREATE OPERATOR <> (
	PROCEDURE="pksuid_ne",
	LEFTARG=pksuid, /* pksuid::Pksuid */
	RIGHTARG=pksuid, /* pksuid::Pksuid */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);

-- pksuid-extension/src/lib.rs:73
-- requires:
--   text_to_pksuid
--   pksuid_to_text


create cast (text AS pksuid) with function text_to_pksuid as implicit;
create cast (pksuid AS text) with function pksuid_to_text as implicit;
