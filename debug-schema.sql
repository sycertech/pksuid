/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- pksuid/src/lib.rs:26
-- pksuid::Pksuid
CREATE TYPE Pksuid;

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_in
CREATE  FUNCTION "pksuid_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS Pksuid /* core::option::Option<pksuid::Pksuid> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_in_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_out
CREATE  FUNCTION "pksuid_out"(
	"input" Pksuid /* pksuid::Pksuid */
) RETURNS cstring /* &core::ffi::c_str::CStr */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_out_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::Pksuid
CREATE TYPE Pksuid (
	INTERNALLENGTH = variable,
	INPUT = pksuid_in, /* pksuid::pksuid_in */
	OUTPUT = pksuid_out, /* pksuid::pksuid_out */
	STORAGE = extended
);

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_le
CREATE  FUNCTION "pksuid_le"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_le_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_le
CREATE OPERATOR <= (
	PROCEDURE="pksuid_le",
	LEFTARG=Pksuid, /* pksuid::Pksuid */
	RIGHTARG=Pksuid, /* pksuid::Pksuid */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_cmp
CREATE  FUNCTION "pksuid_cmp"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_cmp_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_gt
CREATE  FUNCTION "pksuid_gt"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_gt_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_gt
CREATE OPERATOR > (
	PROCEDURE="pksuid_gt",
	LEFTARG=Pksuid, /* pksuid::Pksuid */
	RIGHTARG=Pksuid, /* pksuid::Pksuid */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_ne
CREATE  FUNCTION "pksuid_ne"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_ne_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_ne
CREATE OPERATOR <> (
	PROCEDURE="pksuid_ne",
	LEFTARG=Pksuid, /* pksuid::Pksuid */
	RIGHTARG=Pksuid, /* pksuid::Pksuid */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_ge
CREATE  FUNCTION "pksuid_ge"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_ge_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_ge
CREATE OPERATOR >= (
	PROCEDURE="pksuid_ge",
	LEFTARG=Pksuid, /* pksuid::Pksuid */
	RIGHTARG=Pksuid, /* pksuid::Pksuid */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);

-- pksuid-extension/src/lib.rs:7
-- pksuid::pksuid_generate
CREATE  FUNCTION "pksuid_generate"(
	"prefix" TEXT /* &str */
) RETURNS Pksuid /* pksuid::Pksuid */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_generate_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_hash
CREATE  FUNCTION "pksuid_hash"(
	"value" Pksuid /* pksuid::Pksuid */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_hash_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_eq
CREATE  FUNCTION "pksuid_eq"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_eq_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_eq
CREATE OPERATOR = (
	PROCEDURE="pksuid_eq",
	LEFTARG=Pksuid, /* pksuid::Pksuid */
	RIGHTARG=Pksuid, /* pksuid::Pksuid */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);

-- pksuid/src/lib.rs:26
-- pksuid::Pksuid
CREATE OPERATOR FAMILY Pksuid_hash_ops USING hash;
CREATE OPERATOR CLASS Pksuid_hash_ops DEFAULT FOR TYPE Pksuid USING hash FAMILY Pksuid_hash_ops AS
	OPERATOR    1   =  (Pksuid, Pksuid),
	FUNCTION    1   pksuid_hash(Pksuid);

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_lt
CREATE  FUNCTION "pksuid_lt"(
	"left" Pksuid, /* pksuid::Pksuid */
	"right" Pksuid /* pksuid::Pksuid */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pksuid_lt_wrapper';

-- pksuid/src/lib.rs:26
-- pksuid::pksuid_lt
CREATE OPERATOR < (
	PROCEDURE="pksuid_lt",
	LEFTARG=Pksuid, /* pksuid::Pksuid */
	RIGHTARG=Pksuid, /* pksuid::Pksuid */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);

-- pksuid/src/lib.rs:26
-- pksuid::Pksuid
CREATE OPERATOR FAMILY Pksuid_btree_ops USING btree;
CREATE OPERATOR CLASS Pksuid_btree_ops DEFAULT FOR TYPE Pksuid USING btree FAMILY Pksuid_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 pksuid_cmp(Pksuid, Pksuid);
